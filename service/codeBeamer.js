/// <reference path="../typings/tsd.d.ts"/>

angular.module('ganttly').factory('$codeBeamer', function ($http) {
    var host = gConfig.cbBaseUrl + '/rest';
    var user = gConfig.cbUser;
    var pass = gConfig.cbPass;
    var withCredentials = false;
    var credentials;
    if (user && pass) {
        withCredentials = true;
        credentials = btoa(user + ':' + pass);
    }

    function send(aMethod, aUrl, aParam, aCb) {
        var url = host + aUrl;
        console.log(url);
        var options = {};
        options.url = url;
        options.method = aMethod;
        if (aParam) {
            if (aMethod === 'POST' || aMethod === 'PUT') {
                options.data = aParam;
            } else {
                options.params = aParam;
            }
        }
        if (withCredentials) {
            options.withCredentials = true;
            options.headers = {
                'Authorization': 'Basic ' + credentials
            };
        }

        $http(options).success(function (resp) {
            console.log(resp);
            aCb(null, resp);
        }).error(function (data, status, header, config) {
            aCb({
                data: data,
                status: status,
                header: header,
                config: config
            });
        });
    }

    function get(aUrl, aParam, aCb) {
        send('GET', aUrl, aParam, aCb);
    }

    function put(aUrl, aParam, aCb) {
        send('PUT', aUrl, aParam, aCb);
    }

    function post(aUrl, aParam, aCb) {
        send('POST', aUrl, aParam, aCb);
    }

    function del(aUrl, aCb) {
        send('DELETE', aUrl, null, aCb);
    }

    var codeBeamber = {
        getProjectList: function (aParam, aCb) {
            get('/projects/page/' + aParam.page, aParam, aCb);
        },
        getProjectTask: function (aProjectUri, aCb) {
            console.log('Project URI: ' + aProjectUri);
            var series = [];

            // get uri for task
            var trackerUri;
            series.push(function (cb) {
                get(aProjectUri + '/trackers', {
                    type: 'Task'
                }, function (err, trackers) {
                    if (trackers && trackers.length) {
                        trackerUri = trackers[0].uri;
                        console.log('Tracker URI: ' + trackers[0].uri);
                    }
                    cb(err);
                });
            });

            // get trackers all items
            var tasks;
            series.push(function (cb) {
                get(trackerUri + '/items', null, function (err, items) {
                    tasks = items;
                    cb(err);
                });
            });

            // find associations for each task
            series.push(function (cb) {
                var paralle = [];
                tasks.forEach(function (task) {
                    paralle.push(function (cb) {
                        get(task.uri + '/associations', {
                            type: 'depends,child'
                        }, function (err, items) {
                            task.associations = items;
                            cb();
                        });
                    });
                });
                async.parallelLimit(paralle, 1, function (err) {
                    cb();
                });
            });

            async.series(series, function (err) {
                aCb(err, trackerUri, tasks);
            });
        },
        createTask: function (aParam, aCb) {
            post('/item', aParam, aCb);
        },
        updateTask: function (aTask, aCb) {
            put('/item', aTask, aCb);
        },
        deleteTask: function (aTaskUri, aCb) {
            del(aTaskUri, aCb);
        },
        createAssociation: function (aParam, aCb) {
            aParam.type = aParam.type || "/association/type/1";
            aParam.propagatingSuspects = aParam.propagatingSuspects || false;
            if (!aParam.description) {
                aParam.description = "Generated by ganttly";
                aParam.descFormat = "Plain";
            }

            post('/association', aParam, aCb);
        },
        updateAssociation: function (aParam, aCb) {
            put('/association', aParam, aCb);
        }
    };

    return codeBeamber;
});
//# sourceMappingURL=codeBeamer.js.map
